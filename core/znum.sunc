#include "macro.sunc"

sunc + a b
	a
	.push
	b
	.pop1
	`add a0, a1, a0`
stop

sunc - a b
	a
	.push
	b
	.pop1
	`sub a0, a1, a0`
stop

sunc * a b
	a
	.push
	b
	.pop1
	`mul a0, a1, a0`
stop

sunc / a b
	a
	.push
	b
	.pop1
	`div a0, a1, a0`
stop

sunc % a b
	a
	.push
	b
	.pop1
	`rem a0, a1, a0`
stop

sunc ^ a b
	a
	.push
	b
	.pop1
	`xor a0, a1, a0`
stop

sunc | a b
	a
	.push
	b
	.pop1
	`or a0, a1, a0`
stop

sunc & a b
	a
	.push
	b
	.pop1
	`and a0, a1, a0`
stop

sunc ? c a b
	c
	`beqz a0, {metka1}`
	a
	`j {metka2}`
	`{metka1}:`
	b
	`{metka2}:`
stop

sunc || a b
	a
	`bnez a0, {metka1}`
	b
	`{metka1}:`
	.bool
stop

sunc && a b
	a
	`beqz a0, {metka1}`
	b
	.bool
	`{metka1}:`
stop

sunc < a b
	a
	.push
	b
	.pop1
	`slt a0, a1, a0`
	.cb2b
stop

sunc > a b
	a
	.push
	b
	.pop1
	`sgt a0, a1, a0`
	.cb2b
stop

